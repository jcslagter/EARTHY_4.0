"""Provides a scripting component.
    Inputs:
        x: The x script variable
        y: The y script variable
    Output:
        a: The a output variable"""

__author__ = "Jens (regular)"
__version__ = "2021.10.04"

import ghpythonlib.treehelpers as th
import ghpythonlib as gh
from Rhino.Geometry.Intersect import Intersection
import rhinoscriptsyntax as rs
from collections import defaultdict
from scriptcontext import doc


_x_ = th.tree_to_list(input)

points = []
endpoint = []
x_test = []
y_test = []
startpoint = []
length = []
coordinates = []
pointcloud = []
initial_ = []
initial_des = []


#sorting input attributes
for branch in _x_[0]:
    startpoint.append(rs.coerce3dpoint(branch))
for branch in _x_[1]:
    endpoint.append(rs.coerce3dpoint(branch))
for branch in _x_[2]:
    length.append(branch)

#merging same attributes to big list
for j in range(len(endpoint)):
    points.append(startpoint[j])
    points.append(endpoint[j])
    points.append(length[j])






#create sublists with startpoint, endpoint and length (as weight)
#length of sublists
n = len(_x_)
#creating subllist
sub=[] ; result=[]
for i in points:
    sub+=[i]
    if len(sub)==n: result+=[sub] ; sub=[]
if sub: result+=[sub]





#transfer data to grasshopper type
points = th.list_to_tree(result)






#find closest point on netwerk points 
__x__ = th.tree_to_list(input)
#define all points in doc:
for branch in __x__[0]:
    pointcloud.append(branch)
for branch in __x__[1]:
    pointcloud.append(branch)

#transfer from GUID to 3Dpoint
pointcloud = rs.coerce3dpointlist(pointcloud)
initial_start = rs.coerce3dpointlist(origin)
initial_destination = rs.coerce3dpointlist(destination)


#itterate for all input points
for start_pt in initial_start:
    initial_.append(rs.PointArrayClosestPoint(pointcloud, start_pt))
for destination_pt in initial_destination:
    initial_des.append(rs.PointArrayClosestPoint(pointcloud, destination_pt))




#match searched index to point in document
temp_point_start = []
temp_point_des = []
for i in initial_:
    temp_point_start.append(pointcloud[i])
for i in initial_des:
    temp_point_des.append(pointcloud[i])






#starting pathfinding
#start of pathfinding (dijkstra algorithm)
        #Created by: Ben Alex Keen
        #from:https://benalexkeen.com/implementing-djikstras-shortest-path-algorithm-with-python/
        #IMPLEMENTING DJIKSTRA'S SHORTEST PATH ALGORITHM WITH PYTHON
        #11-01-2017
        #retrieved on:03-10-2021


class Graph():
    def __init__(self):
        """
        self.edges is a dict of all possible next nodes
        e.g. {'X': ['A', 'B', 'C', 'E'], ...}
        self.weights has all the weights between two nodes,
        with the two nodes as a tuple as the key
        e.g. {('X', 'A'): 7, ('X', 'B'): 2, ...}
        """
        self.edges = defaultdict(list)
        self.weights = {}
    
    def add_edge(self, from_node, to_node, weight):
        # Note: assumes edges are bi-directional
        self.edges[from_node].append(to_node)
        self.edges[to_node].append(from_node)
        self.weights[(from_node, to_node)] = weight
        self.weights[(to_node, from_node)] = weight


graph = Graph()

edges = result


## edited by Jens Slagter
for edge in edges:
    graph.add_edge(edge[0], edge[1], edge[2])
## Somewhere in here lies the problem. It is identifying 5 arg. while it allowes for 4 and it is given 3.
## this is probably because the graph network input is not defined properly, However there is no more time left in the project to keep working on this.



##resume Ben Alex Keen algorithm
    def dijsktra(graph, initial, end):
        # shortest paths is a dict of nodes
        # whose value is a tuple of (previous node, weight)
        shortest_paths = {initial: (None, 0)}
        current_node = initial
        visited = set()
        
        while current_node != end:
            visited.add(current_node)
            destinations = graph.edges[current_node]
            weight_to_current_node = shortest_paths[current_node][1]
    
            for next_node in destinations:
                weight = graph.weights[(current_node, next_node)] + weight_to_current_node
                if next_node not in shortest_paths:
                    shortest_paths[next_node] = (current_node, weight)
                else:
                    current_shortest_weight = shortest_paths[next_node][1]
                    if current_shortest_weight > weight:
                        shortest_paths[next_node] = (current_node, weight)
            
            next_destinations = {node: shortest_paths[node] for node in shortest_paths if node not in visited}
            if not next_destinations:
                return 'not found'
            # next node is the destination with the lowest weight
            current_node = min(next_destinations, key=lambda k: next_destinations[k][1])
    
    # Work back through destinations in shortest path
        path = []
        while current_node is not None:
            path.append(current_node)
            next_node = shortest_paths[current_node][0]
            current_node = next_node
        # Reverse path
        path = path[::-1]
        return path
#        shortest_path = (dijsktra(graph, startpoint, destination))
## end of Ben Alex Keen algorithm





## written by Jens Slagter
shortest_path = []

for i in temp_point_start:
    for j in temp_point_des:
        shortest_path.append(dijsktra(graph,i,j))

final_paths = []
for i in shortest_path:
    if i == 'not found':
        pass
    else:
        final_paths.append(i)

final_paths = th.list_to_tree(final_paths)

